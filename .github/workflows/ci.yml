name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md' 
      - 'docs/**'
      - '.gitignore'
  schedule:
    # Weekly security scan
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test suite including performance tests'
        required: false
        default: 'false'
        type: boolean

# Use ARM64 runners for cost efficiency (37% cheaper in 2024)
env:
  SHELL_CHECK_VERSION: 'v0.9.0'
  BATS_VERSION: 'v1.10.0'

jobs:
  # ===============================
  # Code Quality & Linting
  # ===============================
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-24.04-arm64
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          
      - name: 🔧 Setup Environment
        run: |
          # Install modern shell tooling
          sudo apt-get update -qq
          sudo apt-get install -y shellcheck shfmt
          
      - name: 🧹 Shell Script Linting
        run: |
          echo "::group::ShellCheck Analysis"
          find . -name "*.sh" -type f | while read -r script; do
            echo "Checking: $script"
            shellcheck -S error -f gcc "$script"
          done
          echo "::endgroup::"
          
      - name: 📐 Shell Script Formatting
        run: |
          echo "::group::Shell Format Check"
          if ! shfmt -d -i 4 -ci -sr src/*.sh scripts/*.sh tests/*.sh; then
            echo "❌ Shell scripts need formatting. Run: shfmt -w -i 4 -ci -sr **/*.sh"
            exit 1
          fi
          echo "✅ All shell scripts properly formatted"
          echo "::endgroup::"
          
      - name: 🔒 Secret Scanning (Self-Check)
        run: |
          echo "::group::Self Security Audit"
          # Use our own tool to scan itself - meta!
          chmod +x src/git-security-audit.sh
          ./src/git-security-audit.sh --type quick --output json > security-self-check.json
          
          # Check if we found any secrets in our own code
          FINDINGS=$(jq '.total_findings' security-self-check.json)
          if [ "$FINDINGS" -gt 0 ]; then
            echo "❌ Security audit found secrets in our own code!"
            jq '.findings_files[]' security-self-check.json
            exit 1
          fi
          echo "✅ Self security audit passed"
          echo "::endgroup::"

  # ===============================
  # Functional Testing
  # ===============================
  functional-tests:
    name: 🧪 Functional Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    needs: quality-checks
    
    strategy:
      matrix:
        test-suite:
          - unit
          - integration
          - pattern-detection
          - compliance
          
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🏗️ Setup Test Environment
        run: |
          # Install BATS (Bash Automated Testing System)
          git clone https://github.com/bats-core/bats-core.git /tmp/bats
          cd /tmp/bats
          git checkout ${{ env.BATS_VERSION }}
          sudo ./install.sh /usr/local
          
          # Setup test dependencies
          sudo apt-get update -qq
          sudo apt-get install -y jq git-lfs
          
      - name: 🔧 Prepare Test Data
        run: |
          # Create test repository with known secrets for testing
          chmod +x tests/fixtures/setup-test-repo.sh
          ./tests/fixtures/setup-test-repo.sh
          
      - name: 🧪 Run Test Suite
        run: |
          echo "::group::Running ${{ matrix.test-suite }} tests"
          chmod +x tests/test-runner.sh
          ./tests/test-runner.sh ${{ matrix.test-suite }}
          echo "::endgroup::"
          
      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            tests/reports/
            tests/coverage/
          retention-days: 7

  # ===============================
  # Multi-Platform Compatibility
  # ===============================
  compatibility-tests:
    name: 🌐 Platform Compatibility
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: quality-checks
    
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-24.04
          - ubuntu-22.04
          - macos-14      # Apple Silicon
          - macos-13      # Intel
        shell:
          - bash
          - zsh
          
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Shell Environment
        run: |
          if [[ "${{ matrix.shell }}" == "zsh" ]]; then
            if [[ "$RUNNER_OS" == "macOS" ]]; then
              # macOS already has zsh
              echo "Using system zsh"
            else
              sudo apt-get update -qq
              sudo apt-get install -y zsh
            fi
          fi
          
      - name: 🧪 Basic Functionality Test
        shell: ${{ matrix.shell }} {0}
        run: |
          chmod +x src/git-security-audit.sh
          
          # Test basic functionality
          echo "Testing help command..."
          ./src/git-security-audit.sh --help
          
          echo "Testing version command..."
          ./src/git-security-audit.sh --version
          
          echo "Testing pattern listing..."
          ./src/git-security-audit.sh --list-patterns
          
          echo "✅ Basic functionality works on ${{ matrix.os }} with ${{ matrix.shell }}"

  # ===============================
  # Performance Benchmarks
  # ===============================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-24.04-arm64
    timeout-minutes: 30
    needs: functional-tests
    if: github.event.inputs.run_full_tests == 'true' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🏗️ Setup Performance Test Environment
        run: |
          # Install performance monitoring tools
          sudo apt-get update -qq
          sudo apt-get install -y time hyperfine
          
      - name: 📊 Repository Size Benchmarks
        run: |
          chmod +x src/git-security-audit.sh
          
          echo "::group::Performance Benchmarks"
          
          # Test on current repo (small)
          echo "Testing on current repository..."
          hyperfine --warmup 1 --runs 3 \
            './src/git-security-audit.sh --type quick --quiet' \
            --export-markdown performance-small.md
            
          # Create larger test repo for performance testing
          ./tests/fixtures/create-large-test-repo.sh
          cd large-test-repo
          
          echo "Testing on large repository..."
          hyperfine --warmup 1 --runs 2 \
            '../src/git-security-audit.sh --type quick --quiet' \
            --export-markdown ../performance-large.md
            
          cd ..
          echo "::endgroup::"
          
      - name: 📈 Upload Performance Reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            performance-*.md
          retention-days: 30

  # ===============================
  # Security & Vulnerability Scanning
  # ===============================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    needs: quality-checks
    
    permissions:
      security-events: write
      actions: read
      contents: read
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📤 Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🔒 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'  # For any JS in documentation or examples
          
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ===============================
  # Release Preparation
  # ===============================
  release-preparation:
    name: 📦 Release Preparation
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    needs: [functional-tests, compatibility-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏷️ Extract Version
        id: version
        run: |
          VERSION=$(grep 'VERSION=' src/git-security-audit.sh | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
          
      - name: 📋 Generate Changelog
        id: changelog
        run: |
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "Generating changelog since $LAST_TAG"
            git log "$LAST_TAG"..HEAD --pretty=format:"- %s" > CHANGELOG_CURRENT.md
          else
            echo "No previous tags found, generating full changelog"
            git log --pretty=format:"- %s" > CHANGELOG_CURRENT.md
          fi
          
      - name: 📦 Create Release Artifacts
        run: |
          # Create release directory
          mkdir -p release/
          
          # Copy main script
          cp src/git-security-audit.sh release/
          
          # Create installation package
          tar -czf release/git-security-audit-${{ steps.version.outputs.version }}.tar.gz \
            src/ scripts/ docs/ examples/
            
          # Create checksums
          cd release/
          sha256sum * > checksums.txt
          
      - name: 📤 Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release/
          retention-days: 90

  # ===============================
  # Documentation Deployment
  # ===============================
  deploy-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    needs: [functional-tests, compatibility-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      pages: write
      id-token: write
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js for Documentation
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: 📖 Build Documentation Site
        run: |
          # Install documentation dependencies
          npm install -g @11ty/eleventy
          
          # Build static site from markdown docs
          mkdir -p _site
          cp README.md _site/index.md
          cp -r docs/ _site/
          
          # Convert markdown to HTML (simplified)
          echo "Documentation built for GitHub Pages"
          
      - name: 🚀 Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
          path: _site/

  # Test suite execution
  bats-testing:
    name: 🧪 BATS Test Suite
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    needs: quality-checks
    
    strategy:
      matrix:
        test-suite:
          - unit
          - integration
          - performance
          - compliance
          
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Install BATS
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y bats jq
          
      - name: 🧪 Run ${{ matrix.test-suite }} Tests
        run: |
          chmod +x tests/test-runner.sh
          chmod +x src/git-security-audit.sh
          ./tests/test-runner.sh ${{ matrix.test-suite }} --verbose
          
      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: tests/reports/
          retention-days: 7
