name: "🛡️ CI/CD - Security & Quality"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Permisos modernos GitHub 2024-2025
permissions:
  contents: read
  security-events: write
  actions: read
  issues: write

jobs:
  # Test básico del tool
  test-installation:
    name: "Installation & Basic Tests"
    runs-on: ubuntu-24.04  # Latest LTS 2024
    
    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: "Test Installation Script"
      run: |
        chmod +x scripts/install.sh
        ./scripts/install.sh
        export PATH="$HOME/.local/bin:$PATH"
        
        # Verify installation
        which git-security-audit
        git-security-audit --version
        git-security-audit --help > /dev/null
        
    - name: "Self-Audit Test"
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        
        # Run self-audit (should be clean)
        git-security-audit --type quick --quiet
        echo "✅ Self-audit completed successfully"

  # Test detection capabilities
  test-detection:
    name: "Detection Capability Tests"
    runs-on: ubuntu-24.04
    
    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v4
      
    - name: "Install Tool"
      run: |
        chmod +x scripts/install.sh
        ./scripts/install.sh
        export PATH="$HOME/.local/bin:$PATH"
        
    - name: "Test Secret Detection"
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        
        # Create test repository with known secrets
        mkdir test-detection && cd test-detection
        git init
        
        # Add test secrets
        echo "AWS_ACCESS_KEY_ID=AKIA1234567890EXAMPLE" > .env
        echo "GITHUB_TOKEN=ghp_1234567890abcdefghijklmnopqrstuvwxyz123456" >> .env
        echo "DATABASE_URL=postgres://user:pass@localhost:5432/db" >> config.yml
        
        git add .
        git commit -m "Test secrets for detection verification"
        
        # Run comprehensive scan
        git-security-audit --type comprehensive --output json > ../detection-results.json
        
        # Verify detection worked
        cd ..
        FINDINGS=$(jq '.total_findings // 0' detection-results.json)
        echo "🔍 Detection results: $FINDINGS secrets found"
        
        if [ "$FINDINGS" -lt 3 ]; then
          echo "❌ Detection failed: Expected at least 3 secrets, found $FINDINGS"
          cat detection-results.json
          exit 1
        fi
        
        echo "✅ Detection test passed: $FINDINGS secrets detected"
        
    - name: "Upload Detection Results"
      uses: actions/upload-artifact@v4
      with:
        name: detection-test-results
        path: detection-results.json
      if: always()

  # Multi-OS compatibility test
  cross-platform-test:
    name: "Cross-Platform Compatibility"
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04, macos-latest]
        
    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v4
      
    - name: "Test Platform Compatibility"
      run: |
        chmod +x scripts/install.sh
        ./scripts/install.sh
        
        # Platform-specific PATH setup
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          export PATH="$HOME/.local/bin:$PATH"
        else
          export PATH="$HOME/.local/bin:$PATH"
        fi
        
        # Basic functionality test
        git-security-audit --version
        git-security-audit --type quick --quiet
        
        echo "✅ Platform compatibility verified on ${{ matrix.os }}"

  # Security scan using our own tool (dogfooding)
  security-scan:
    name: "Security Self-Scan"
    runs-on: ubuntu-24.04
    
    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive scan
        
    - name: "Install and Run Security Scan"
      run: |
        chmod +x scripts/install.sh
        ./scripts/install.sh
        export PATH="$HOME/.local/bin:$PATH"
        
        # Comprehensive self-scan
        git-security-audit --type comprehensive --output json --verbose > security-scan-results.json
        
        # Check results
        FINDINGS=$(jq '.total_findings // 0' security-scan-results.json)
        echo "🛡️ Self-scan completed: $FINDINGS potential issues found"
        
        # For a security tool, we should have zero findings in our own code
        if [ "$FINDINGS" -gt 0 ]; then
          echo "⚠️ Security findings in our own codebase:"
          jq '.findings[]' security-scan-results.json
          # Don't fail - these might be test patterns or false positives
        else
          echo "✅ Clean security scan: No issues detected"
        fi
        
    - name: "Upload Security Scan Results"
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: security-scan-results.json
      if: always()

  # Code quality and linting
  code-quality:
    name: "Code Quality & Linting"
    runs-on: ubuntu-24.04
    
    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v4
      
    - name: "Shell Script Analysis"
      run: |
        # Install shellcheck for bash linting
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
        # Lint main script
        echo "🔍 Analyzing shell scripts..."
        find . -name "*.sh" -type f | while read -r script; do
          echo "Checking: $script"
          shellcheck "$script" || echo "⚠️ Issues found in $script"
        done
        
        # Lint install script specifically
        shellcheck scripts/install.sh
        echo "✅ Shell script analysis completed"
        
    - name: "Documentation Validation"
      run: |
        # Check for required files
        required_files=("README.md" "LICENSE" "SECURITY.md")
        
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ $file exists"
          else
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
        # Basic README validation
        if grep -q "git-security-audit" README.md; then
          echo "✅ README contains project name"
        else
          echo "❌ README missing project reference"
          exit 1
        fi
        
        echo "✅ Documentation validation passed"

  # Performance benchmarking
  performance-test:
    name: "Performance Benchmarks"
    runs-on: ubuntu-24.04
    
    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v4
      
    - name: "Performance Testing"
      run: |
        chmod +x scripts/install.sh
        ./scripts/install.sh
        export PATH="$HOME/.local/bin:$PATH"
        
        # Create test repository with multiple commits
        mkdir perf-test && cd perf-test
        git init
        
        # Add multiple commits to test performance
        for i in {1..50}; do
          echo "Content $i" > "file_$i.txt"
          git add "file_$i.txt"
          git commit -m "Add file $i"
        done
        
        # Benchmark scanning time
        echo "🚀 Running performance benchmark..."
        time git-security-audit --type comprehensive --quiet
        
        echo "✅ Performance test completed"

